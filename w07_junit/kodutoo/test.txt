import java.util.*;

public class gameTest {

public static int rida, veerg;
public static char laud[][] = new char [4][4];
public static Scanner console = new Scanner(System.in);
public static char kord = 'X';

public static void main(String[] args) {
   for(int i = 1; i < 4; i++) {     //lisab lauale placeholderiks "_" tahise iga ruudu sisse
       for(int j = 1; j < 4; j++){
           laud[i][j] = '_';
       }
   }

   laud();
   System.out.println("-TripsTrapsTrull-");
   mang();
}

//-----mangu laud---

public static void laud() {
  System.out.println("---1---2---3--");   

  for (int i = 1; i < 4; i++) {     //lisasin 1 yhiku molemale poole et saaks kasutada numbreid 1, 2, 3
      System.out.print(i + "| ");   //prindib laua vertikaaleslt ja horisontaalselt
      for (int j = 1; j < 4; j++) {
          System.out.print(laud[i][j] + " | "); //prindib ruutude vahe seinad
      }

      System.out.println();
      System.out.println("--------------");
  }
}

//-------vaheta mangjate korda ning sisesta nende kaik mangu lauale--------

    public static void mang() {
        boolean kestab = true;
        while(kestab) {
            System.out.println(kord + " mängija kord (rida/veerg)");
            rida = console.nextInt(); //loeb mangija sisendit
            veerg = console.nextInt();
            laud[rida][veerg] = kord;
            if(voitja(rida,veerg)) {
                kestab = false;
                System.out.print(kord + " sina võitsid");
                return;
            }
            laud();
            if(kord == 'X') {
                kord = 'O';
            } else
                kord='X';
        }
    }

    //-------kontrolli voitjat-----------

    public static boolean voitja(int liigutus1, int liigutus2) {
        if(laud[1][liigutus2] == laud[2][liigutus2] && laud[1][liigutus2] == laud[3][liigutus2])
            return true;
        if(laud[liigutus1][1] == laud[liigutus1][2] && laud[liigutus1][1] == laud[liigutus1][3])
            return true;
        if(laud[1][1] == laud[2][2] && laud[1][1] == laud[3][3] && laud[2][2] != '_')
            return true;
        if(laud[1][3] == laud[2][2] && laud[1][3] == laud[3][1] && laud[2][2] != '_')
            return true;
        return false;
    }
}

----------------------------------------------

import java.util.*;

public class gameTest {

    public static int rida, veerg;
    public static char laud[][] = new char [7][7];
    public static Scanner console = new Scanner(System.in);
    public static char kord = 'X';

    public static void main(String[] args) {

    laud();
    mang();
    }

    //-----mangu laud---

    public static void laud() {
        System.out.println("---1---2---3---4---5---6---7--");

        for(int i = 0; i < 6; i++) {     //placeholder "_"
                for(int j = 0; j < 7; j++){
                laud[i][j] = '_';
            }
        }

        for (int i = 0; i < 6; i++) {
            System.out.print(i + "| ");   //prindib laua vasak seina
            for (int j = 0; j < 7; j++) {
                System.out.print(laud[i][j] + " | "); //prindib ruutude vahe seinad
            }

            System.out.println();
            System.out.println("------------------------------");
    }
}

//-------vaheta mangjate korda ning sisesta nende kaik mangu lauale--------

    public static void mang() {
        boolean kestab = true;
        while(kestab) {
            rida = 5;
            System.out.println(kord + " mängija kord (veerg): ");
            veerg = console.nextInt();
            laud[rida][veerg] = kord;
            System.out.println(laud[rida]);
            System.out.println(laud[veerg]);
            laud();

            // if(laud[veerg] == laud[veerg]){
                
            // } else {

            // }

        }
    }
}

import java.util.Scanner;

public class Connect4 {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		char[][] grid = new char[6][7];
		
		//initialize array
		for (int row = 0; row < grid.length; row++){
			for (int col = 0; col < grid[0].length; col++){
				grid[row][col] = ' ';
			}
		}
		
		int turn = 1;
		char player = 'R';
		boolean winner = false;		
		
		//play a turn
		while (winner == false && turn <= 42){
			boolean validPlay;
			int play;
			do {
				display(grid);
				
				System.out.print("Player " + player + ", choose a column: ");
				play = in.nextInt();
				
				//validate play
				validPlay = validate(play,grid);
				
			}while (validPlay == false);
			
			//drop the checker
			for (int row = grid.length-1; row >= 0; row--){
				if(grid[row][play] == ' '){
					grid[row][play] = player;
					break;
				}
			}
			
			//determine if there is a winner
			winner = isWinner(player,grid);
			
			//switch players
			if (player == 'R'){
				player = 'B';
			}else{
				player = 'R';
			}
			
			turn++;			
		}
		display(grid);
		
		if (winner){
			if (player=='R'){
				System.out.println("Black won");
			}else{
				System.out.println("Red won");
			}
		}else{
			System.out.println("Tie game");
		}
		
	}
	
	public static void display(char[][] grid){
		System.out.println(" 0 1 2 3 4 5 6");
		System.out.println("---------------");
		for (int row = 0; row < grid.length; row++){
			System.out.print("|");
			for (int col = 0; col < grid[0].length; col++){
				System.out.print(grid[row][col]);
				System.out.print("|");
			}
			System.out.println();
			System.out.println("---------------");
		}
		System.out.println(" 0 1 2 3 4 5 6");
		System.out.println();
	}
	
	public static boolean validate(int column, char[][] grid){
		//valid column?
		if (column < 0 || column > grid[0].length){
			return false;
		}
		
		//full column?
		if (grid[0][column] != ' '){
			return false;
		}
		
		return true;
	}
	
	public static boolean isWinner(char player, char[][] grid){
		//check for 4 across
		for(int row = 0; row<grid.length; row++){
			for (int col = 0;col < grid[0].length - 3;col++){
				if (grid[row][col] == player   && 
					grid[row][col+1] == player &&
					grid[row][col+2] == player &&
					grid[row][col+3] == player){
					return true;
				}
			}			
		}
		//check for 4 up and down
		for(int row = 0; row < grid.length - 3; row++){
			for(int col = 0; col < grid[0].length; col++){
				if (grid[row][col] == player   && 
					grid[row+1][col] == player &&
					grid[row+2][col] == player &&
					grid[row+3][col] == player){
					return true;
				}
			}
		}
		//check upward diagonal
		for(int row = 3; row < grid.length; row++){
			for(int col = 0; col < grid[0].length - 3; col++){
				if (grid[row][col] == player   && 
					grid[row-1][col+1] == player &&
					grid[row-2][col+2] == player &&
					grid[row-3][col+3] == player){
					return true;
				}
			}
		}
		//check downward diagonal
		for(int row = 0; row < grid.length - 3; row++){
			for(int col = 0; col < grid[0].length - 3; col++){
				if (grid[row][col] == player   && 
					grid[row+1][col+1] == player &&
					grid[row+2][col+2] == player &&
					grid[row+3][col+3] == player){
					return true;
				}
			}
		}
		return false;
	}
}